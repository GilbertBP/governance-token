// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol";

contract MyToken is ERC20, ERC20Permit, ERC20Votes {
    constructor() ERC20("MyToken", "MTK") ERC20Permit("MyToken") {}

    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override(ERC20, ERC20Permit, ERC20Votes) {
        super._beforeTokenTransfer(from, to, amount);
    }

    // Permit function from ERC20Permit
    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {
        _permit(owner, spender, value, deadline, v, r, s);
    }

    // Vote functions from ERC20Votes
    function _mint(address to, uint256 amount) internal override(ERC20, ERC
